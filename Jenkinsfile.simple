pipeline {
    agent any
    
    tools {
        nodejs 'Node18'  // Nome da instala√ß√£o Node.js configurada no Jenkins
    }
    
    environment {
        NODE_VERSION = '18'
        APP_NAME = 'jenkins-cicd-node-project'
        BUILD_NUMBER_ENV = "${env.BUILD_NUMBER}"
        PATH = "${tool 'Node18'}/bin:${env.PATH}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Fazendo checkout do c√≥digo...'
                checkout scm
            }
        }
        
        stage('Setup Node.js') {
            steps {
                echo '‚öôÔ∏è Configurando Node.js...'
                sh '''
                    echo "Verificando Node.js..."
                    which node
                    node --version
                    which npm
                    npm --version
                    echo "Node.js configurado com sucesso!"
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Instalando depend√™ncias...'
                sh 'npm ci'
            }
        }
        
        stage('Lint Code') {
            steps {
                echo 'üîç Executando lint...'
                sh 'npm run lint || echo "Lint passou ou n√£o est√° configurado"'
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'üß™ Executando testes...'
                sh 'npm test'
            }
        }
        
        stage('Build') {
            steps {
                echo 'üèóÔ∏è Executando build...'
                sh 'npm run build'
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'üîí Executando verifica√ß√£o de seguran√ßa...'
                sh '''
                    npm audit --audit-level=high || echo "Vulnerabilidades encontradas, mas continuando..."
                '''
            }
        }
        
        stage('Package') {
            steps {
                echo 'üì¶ Criando pacote...'
                sh '''
                    tar -czf ${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz \
                        --exclude=node_modules \
                        --exclude=.git \
                        --exclude=coverage \
                        --exclude=*.tar.gz \
                        .
                '''
                
                archiveArtifacts(
                    artifacts: "${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz",
                    fingerprint: true
                )
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                echo 'üöÄ Deploy para ambiente de staging...'
                sh '''
                    echo "Simulando deploy para staging..."
                    echo "Artifact: ${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz"
                '''
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo 'üéØ Deploy para produ√ß√£o...'
                input message: 'Confirmar deploy para produ√ß√£o?', ok: 'Deploy'
                sh '''
                    echo "Simulando deploy para produ√ß√£o..."
                    echo "Artifact: ${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz"
                '''
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Limpando workspace...'
            cleanWs()
        }
        
        success {
            echo '‚úÖ Pipeline executado com sucesso!'
            echo 'üìä Relat√≥rios de cobertura gerados na pasta coverage/'
        }
        
        failure {
            echo '‚ùå Pipeline falhou!'
            echo 'Verifique os logs acima para mais detalhes'
        }
        
        unstable {
            echo '‚ö†Ô∏è Pipeline inst√°vel!'
        }
    }
}
