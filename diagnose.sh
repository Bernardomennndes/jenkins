#!/bin/bash

echo "üîç Diagn√≥stico do Pipeline Jenkins"
echo "================================"
echo ""

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo "‚ùå Este script deve ser executado no diret√≥rio do projeto"
    echo "üìÅ Navegue para: /Users/bernardomennndes/Documents/projects/university/jenkins"
    exit 1
fi

echo "‚úÖ Diret√≥rio correto encontrado"
echo ""

# Verificar arquivos essenciais
echo "üìã Verificando arquivos essenciais:"
files=("package.json" "src/app.js" "test/app.test.js" "Jenkinsfile")
for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo "  ‚úÖ $file"
    else
        echo "  ‚ùå $file - FALTANDO!"
    fi
done
echo ""

# Verificar Jenkinsfiles dispon√≠veis
echo "üìã Jenkinsfiles dispon√≠veis:"
jenkinsfiles=("Jenkinsfile" "Jenkinsfile.simple" "Jenkinsfile.robust" "Jenkinsfile.alternative")
for file in "${jenkinsfiles[@]}"; do
    if [ -f "$file" ]; then
        echo "  ‚úÖ $file"
    else
        echo "  ‚ùå $file - n√£o encontrado"
    fi
done
echo ""

# Verificar Node.js
echo "üìã Verificando Node.js local:"
if command -v node &> /dev/null; then
    echo "  ‚úÖ Node.js: $(node --version)"
else
    echo "  ‚ùå Node.js n√£o encontrado"
fi

if command -v npm &> /dev/null; then
    echo "  ‚úÖ npm: $(npm --version)"
else
    echo "  ‚ùå npm n√£o encontrado"
fi
echo ""

# Verificar depend√™ncias
echo "üìã Verificando depend√™ncias:"
if [ -d "node_modules" ]; then
    echo "  ‚úÖ node_modules existe"
    echo "  üìä Pacotes instalados: $(ls node_modules | wc -l | tr -d ' ')"
else
    echo "  ‚ùå node_modules n√£o encontrado"
    echo "  üí° Execute: npm install"
fi
echo ""

# Testar scripts npm
echo "üìã Testando scripts npm:"
scripts=("test" "lint" "build")
for script in "${scripts[@]}"; do
    if npm run $script --silent &> /dev/null; then
        echo "  ‚úÖ npm run $script - OK"
    else
        echo "  ‚ö†Ô∏è  npm run $script - FALHA"
    fi
done
echo ""

# Verificar Git
echo "üìã Verificando Git:"
if git status &> /dev/null; then
    echo "  ‚úÖ Reposit√≥rio Git: $(git branch --show-current)"
    echo "  üìä Status: $(git status --porcelain | wc -l | tr -d ' ') arquivos modificados"
else
    echo "  ‚ùå N√£o √© um reposit√≥rio Git ou Git n√£o configurado"
fi
echo ""

# Sugest√µes baseadas no diagn√≥stico
echo "üí° Sugest√µes:"
echo ""

if [ ! -d "node_modules" ]; then
    echo "1. Instalar depend√™ncias:"
    echo "   npm install"
    echo ""
fi

if [ -f "Jenkinsfile.robust" ]; then
    echo "2. Para pipelines mais robustos, use:"
    echo "   mv Jenkinsfile Jenkinsfile.original"
    echo "   mv Jenkinsfile.robust Jenkinsfile"
    echo ""
fi

echo "3. URLs √∫teis do Jenkins:"
echo "   Dashboard: http://localhost:8080"
echo "   Global Tools: http://localhost:8080/manage/configureTools/"
echo "   Console do √∫ltimo build: http://localhost:8080/job/node-cicd-pipeline/lastBuild/console"
echo ""

echo "4. Para verificar logs do Jenkins:"
echo "   docker logs jenkins  # se usando Docker"
echo "   brew services list | grep jenkins  # se instala√ß√£o local"
echo ""
