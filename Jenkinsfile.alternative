pipeline {
    agent any
    
    environment {
        APP_NAME = 'jenkins-cicd-node-project'
        BUILD_NUMBER_ENV = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Fazendo checkout do c√≥digo...'
                checkout scm
            }
        }
        
        stage('Setup Node.js') {
            steps {
                echo '‚öôÔ∏è Instalando Node.js...'
                sh '''
                    # Instalar Node.js usando NodeSource
                    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - || echo "Falha na configura√ß√£o do reposit√≥rio Node.js"
                    sudo apt-get install -y nodejs || echo "Falha na instala√ß√£o do Node.js via apt"
                    
                    # Verificar se Node.js foi instalado
                    if ! command -v node &> /dev/null; then
                        echo "Tentando instalar Node.js via snap..."
                        sudo snap install node --classic || echo "Falha na instala√ß√£o via snap"
                    fi
                    
                    # Verificar vers√µes
                    node --version || echo "Node.js n√£o est√° dispon√≠vel"
                    npm --version || echo "npm n√£o est√° dispon√≠vel"
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Instalando depend√™ncias...'
                sh '''
                    if command -v npm &> /dev/null; then
                        npm ci
                    else
                        echo "‚ùå npm n√£o dispon√≠vel, pulando instala√ß√£o de depend√™ncias"
                        exit 1
                    fi
                '''
            }
        }
        
        stage('Lint Code') {
            steps {
                echo 'üîç Executando lint...'
                sh '''
                    if command -v npm &> /dev/null; then
                        npm run lint || echo "Lint n√£o configurado ou falhou"
                    else
                        echo "npm n√£o dispon√≠vel, pulando lint"
                    fi
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'üß™ Executando testes...'
                sh '''
                    if command -v npm &> /dev/null; then
                        npm test
                    else
                        echo "‚ùå npm n√£o dispon√≠vel, n√£o √© poss√≠vel executar testes"
                        exit 1
                    fi
                '''
            }
            post {
                always {
                    // Publicar relat√≥rios de teste se existirem
                    script {
                        if (fileExists('coverage/index.html')) {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'coverage',
                                reportFiles: 'index.html',
                                reportName: 'Coverage Report'
                            ])
                            echo 'Relat√≥rio de cobertura publicado'
                        } else {
                            echo 'Relat√≥rio de cobertura n√£o encontrado'
                        }
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'üèóÔ∏è Executando build...'
                sh '''
                    if command -v npm &> /dev/null; then
                        npm run build
                    else
                        echo "‚ùå npm n√£o dispon√≠vel, build n√£o pode ser executado"
                        exit 1
                    fi
                '''
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'üîí Executando verifica√ß√£o de seguran√ßa...'
                sh '''
                    if command -v npm &> /dev/null; then
                        npm audit --audit-level=high || echo "Vulnerabilidades encontradas, mas continuando..."
                    else
                        echo "npm n√£o dispon√≠vel, pulando verifica√ß√£o de seguran√ßa"
                    fi
                '''
            }
        }
        
        stage('Package') {
            steps {
                echo 'üì¶ Criando pacote...'
                sh '''
                    tar -czf ${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz \
                        --exclude=node_modules \
                        --exclude=.git \
                        --exclude=coverage \
                        --exclude=*.tar.gz \
                        .
                '''
                
                archiveArtifacts(
                    artifacts: "${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz",
                    fingerprint: true
                )
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                echo 'üöÄ Deploy para ambiente de staging...'
                sh '''
                    echo "Simulando deploy para staging..."
                    echo "Artifact: ${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz"
                '''
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo 'üéØ Deploy para produ√ß√£o...'
                input message: 'Confirmar deploy para produ√ß√£o?', ok: 'Deploy'
                sh '''
                    echo "Simulando deploy para produ√ß√£o..."
                    echo "Artifact: ${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz"
                '''
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Limpando workspace...'
            cleanWs()
        }
        
        success {
            echo '‚úÖ Pipeline executado com sucesso!'
        }
        
        failure {
            echo '‚ùå Pipeline falhou!'
            echo 'Verifique se Node.js est√° configurado corretamente no Jenkins'
        }
        
        unstable {
            echo '‚ö†Ô∏è Pipeline inst√°vel!'
        }
    }
}
