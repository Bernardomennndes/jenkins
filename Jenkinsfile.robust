pipeline {
    agent any
    
    tools {
        nodejs 'Node18'  // Nome da instala√ß√£o Node.js configurada no Jenkins
    }
    
    environment {
        NODE_VERSION = '18'
        APP_NAME = 'jenkins-cicd-node-project'
        BUILD_NUMBER_ENV = "${env.BUILD_NUMBER}"
        PATH = "${tool 'Node18'}/bin:${env.PATH}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Fazendo checkout do c√≥digo...'
                checkout scm
            }
        }
        
        stage('Setup Node.js') {
            steps {
                echo '‚öôÔ∏è Configurando Node.js...'
                sh '''
                    echo "Verificando Node.js..."
                    which node || echo "Node.js n√£o encontrado no PATH"
                    node --version || echo "Erro ao obter vers√£o do Node.js"
                    which npm || echo "npm n√£o encontrado no PATH"
                    npm --version || echo "Erro ao obter vers√£o do npm"
                    echo "Verifica√ß√£o conclu√≠da!"
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Instalando depend√™ncias...'
                sh '''
                    echo "Verificando package.json..."
                    ls -la package.json || echo "package.json n√£o encontrado"
                    
                    echo "Instalando depend√™ncias..."
                    npm ci || {
                        echo "npm ci falhou, tentando npm install..."
                        npm install || {
                            echo "Falha na instala√ß√£o de depend√™ncias"
                            exit 1
                        }
                    }
                    
                    echo "Depend√™ncias instaladas com sucesso!"
                '''
            }
        }
        
        stage('Lint Code') {
            steps {
                echo 'üîç Executando lint...'
                script {
                    try {
                        sh 'npm run lint'
                        echo 'Lint executado com sucesso!'
                    } catch (Exception e) {
                        echo 'Lint falhou ou n√£o est√° configurado: ' + e.getMessage()
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'üß™ Executando testes...'
                script {
                    try {
                        sh 'npm test'
                        echo 'Testes executados com sucesso!'
                    } catch (Exception e) {
                        echo 'Testes falharam: ' + e.getMessage()
                        error('Falha nos testes')
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'üèóÔ∏è Executando build...'
                script {
                    try {
                        sh 'npm run build'
                        echo 'Build executado com sucesso!'
                    } catch (Exception e) {
                        echo 'Build falhou: ' + e.getMessage()
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'üîí Executando verifica√ß√£o de seguran√ßa...'
                script {
                    try {
                        sh 'npm audit --audit-level=high'
                        echo 'Audit passou sem vulnerabilidades cr√≠ticas!'
                    } catch (Exception e) {
                        echo 'Vulnerabilidades encontradas ou audit falhou: ' + e.getMessage()
                        echo 'Continuando mesmo assim...'
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Package') {
            steps {
                echo 'üì¶ Criando pacote...'
                script {
                    try {
                        sh '''
                            echo "Criando arquivo tar.gz..."
                            tar -czf ${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz \
                                --exclude=node_modules \
                                --exclude=.git \
                                --exclude=coverage \
                                --exclude=*.tar.gz \
                                .
                            
                            echo "Verificando arquivo criado..."
                            ls -la ${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz
                        '''
                        
                        // Arquivar artefatos de forma mais robusta
                        archiveArtifacts artifacts: "${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz", allowEmptyArchive: true
                        echo 'Pacote criado e arquivado com sucesso!'
                        
                    } catch (Exception e) {
                        echo 'Falha ao criar pacote: ' + e.getMessage()
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                echo 'üöÄ Deploy para ambiente de staging...'
                sh '''
                    echo "Simulando deploy para staging..."
                    echo "Artifact: ${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz"
                    echo "Deploy para staging conclu√≠do!"
                '''
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo 'üéØ Deploy para produ√ß√£o...'
                script {
                    try {
                        input message: 'Confirmar deploy para produ√ß√£o?', ok: 'Deploy'
                        sh '''
                            echo "Simulando deploy para produ√ß√£o..."
                            echo "Artifact: ${APP_NAME}-${BUILD_NUMBER_ENV}.tar.gz"
                            echo "Deploy para produ√ß√£o conclu√≠do!"
                        '''
                    } catch (Exception e) {
                        echo 'Deploy para produ√ß√£o cancelado ou falhou: ' + e.getMessage()
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Executando limpeza...'
            script {
                try {
                    cleanWs()
                    echo 'Workspace limpo com sucesso!'
                } catch (Exception e) {
                    echo 'Falha na limpeza do workspace: ' + e.getMessage()
                }
            }
        }
        
        success {
            echo '‚úÖ Pipeline executado com sucesso!'
            echo 'üìä Todos os est√°gios foram conclu√≠dos'
        }
        
        failure {
            echo '‚ùå Pipeline falhou!'
            echo 'Verifique os logs acima para identificar o problema'
        }
        
        unstable {
            echo '‚ö†Ô∏è Pipeline inst√°vel!'
            echo 'Alguns est√°gios falharam mas o pipeline continuou'
        }
    }
}
